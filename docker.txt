1、docker与虚拟机的区别
运行环境：
	docker：docker构建在操作系统上，所以docker甚至可以在虚拟机上运行
	虚拟机：虚拟化技术依赖物理CPU和内存，是硬件级别的
隔离性：
	docker属于进程之间的隔离
	虚拟机可实现系统级别隔离
安全性：
	docker的租户root和宿主root等同，一旦容器内的用户从普通用户权限提升为root权限，它就
	直接具备了宿主机的root权限，进而可进行无限制的操作，故：docker的安全性也更弱
	虚拟机租户root权限和宿主机的root虚拟机权限是分离的，并且虚拟机利用硬件隔离：如
	Intel的VT-d和VT-x的ring-l硬件隔离技术，这种隔离技术可以防止虚拟机冲突和彼此交互
可管理性：
	docker的集中化管理工具还不算成熟
	各种虚拟化技术都有成熟的管理工具，例如VMware vCenter提供完备的虚拟机管理能力
快速创建、删除：
	docker容器的创建时秒级别的，docker的快速迭代性，决定了无论是开发、测试、部署都可以节约大量是时间
	虚拟机创建时分钟级别的
交付、部署：
	docker在dockerfile中记录了容器构建过程，可在集群中实现快速分发和快速部署
	虚拟机可以通过实现环境交付的一致性，但镜像分发无法体系化

2、docker client通过三个命令（docker build、docker pull、docker run），先到docker daemon pull拉取images，
如果服务端没有，先到仓库拉取（如果仓库没有可以build自建images）；最后通过run命令创建容器

3、什么时镜像
a、是一个只读的模板，就是一个dockerfile，可以在镜像仓库上传或下载。
b、先有镜像后有容器；并且一个镜像可以创建多个容器。
c、docker镜像最大的特点：分成结构。最底层是一个base层，也即是一个操作系统。它还会从base层一层层叠加生成。
    什么是层层叠加？例如，安装一个软件，它就会在base层的基础上追加一层。
    它的好处就是资源共享。

3、常用命令
a、查看有哪些镜像
  docker images
b、搜索镜像（在http://hub.docker.com中搜索）
  docker search mysql
c、下载一个镜像（不写版本则默认下载最新的版本）
  docker pull mysql:5.7
d、删除docker镜像（通过imageid可以删除，查看id可以使用docker images）
  docker rmi imageid
  删除全部镜像（如果镜像有容器引用则不能删除，可以先删除容器再删除镜像）
  docker rmi $(docker images -q)
e、查看容器
  docker ps -a
f、删除容器
  docker rm -f 容器id

4、配置镜像加速器
  先体验国外下载有多慢
  time docker pull nginx
  使用阿里云镜像加速器
  time docker pull nginx

  centos的阿里云加速器命令：
sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://9uywlzru.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
  
5、dockerfile代码解释
什么是dockerfile？
  a、dockerfile是一个文本的配置文件，它可以快速创建自定义的镜像
  b、文本内容：包含了若干的命令行，并支持#作为作为注释行
  c、文本格式：基础镜像FROM，维护者MAINTAINER，操作指令ADD，容器启动后指令等共计4部分
===============dockerfile文件=====================
#第一行：基础镜像：FROM指令：基础镜像名：tag，例如java:8
FROM java:8
#第二行：维护者：格式MAINTAINER <name>
MAINTAINER superxiaoyu
#第三行：镜像的操作指令
#ADD拷贝一个文件到容器中，格式：ADD <src> <dest>
ADD eureka-server-0.0.1-SNAPSHOT.jar /data/app.jar
#第四行：告诉容器暴露端口，在容器启动的时候，需要通过-p做端口映射
EXPOSE 8761
#第五行：配置容器启动后，执行什么命令
ENTRYPOINT ["java","-jar","/data/app.jar"]

6、构建一个springcloud
cd /
cd ~
cd /data
mkdir dockerfile
cd dockerfile/
将打包的jar工程jar包放到此目录下（eureka-server-0.0.1-SNAPSHOT.jar）
vi dockerfile
将上面的dockerfile内容拷贝进此文件
docker build -t registry-superxiaoyu/eureka-server:1.0.0 .
其中： -t 对镜像进行命名，一般的命名法 仓库名/镜像名字:版本号
注意：其中 .号，代表当前目录下的dockerfile文件
查看本地镜像命令：docker images
启动镜像：docker run -d -p 8761:8761 --name=eureka registry-superxiaoyu/eureka-server:1.0.0
查看是否启动成功：docker ps

7、什么是镜像仓库
就是存放镜像的地方

8、如何建设docker的仓库（docker官方仓库+阿里云仓库+本地仓库）
登陆：https://hub.docker.com/
a、创建一个官方仓库
本地登陆：docker login
修改镜像名：（为什么要改？因为docker官方镜像仓库是以用户名来命名仓库的）
docker tag registry-superxiaoyu/eurek-server:1.0.0 官方的登录名/eurek-server:1.0.0
docker push 官方的登录名/eurek-server:1.0.0
从远程仓库下载下来：
先删除本地旧镜像：docker rmi 官方的登录名/eurek-server:1.0.0
docker pull 官方的登录名/eurek-server:1.0.0

b、创建一个阿里云仓库
登陆阿里云并进入容器镜像管理
创建一个命名空间
创建一个镜像仓库
<1>登陆阿里云Docker Registry
  docker login --username=super小小小禹 registry.cn-hangzhou.aliyuncs.com
<2>修改镜像名
  docker tag a79fbd66bb3c registry.cn-hangzhou.aliyuncs.com/superxiaoyu/eureka-server:1.0.0
<3>push到自己在阿里云创建的镜像仓库
  docker push registry.cn-hangzhou.aliyuncs.com/superxiaoyu/eureka-server:1.0.0
<4>从阿里云将镜像拉下来
  先删除本地的
  docker rmi registry.cn-hangzhou.aliyuncs.com/superxiaoyu/eureka-server
  再从阿里云拉取镜像
  docker pull registry.cn-hangzhou.aliyuncs.com/superxiaoyu/eureka-server:1.0.0

c、创建一个本地仓库
<1>为什么需要搭建本地仓库？
  节约带宽，因为如果用docker或阿里云官方的仓库走的市互联网，浪费带宽，而且慢
  提供资利用和安全：因为是公司内部的镜像，推送到本地仓库，更方便公司内部人员用，而且安全性高
<2>搭建本地仓库命令
  拉取官方仓库
docker pull registry
  创建一个仓库容器
docker run -d -p 5000:5000 \
--restart=always \
--privileged=true \
--name=registry-superxiaoyu \
-v /date/volume/registry:/var/lib/registry \
registry
  修改镜像
docker tag a79fbd66bb3c registry-superxiaoyu:5000/eureka-server:1.0.0
  修改hosts(添加：127.0.0.1 registry-superixoayu)
vi /etc/hosts
  推送镜像到私用仓库
docker push registry-superxiaoyu:5000/eureka-server:1.0.0
  查看仓库中的内容（有哪些镜像）
curl -X GET http://127.0.0.1:5000/v2/_catalog
  查看版本（某个镜像的版本信息）
curl -X GET http://127.0.0.1:5000/v2/eureka-server/tags/list
  拉取镜像（之前要删除本地镜像：docker rmi registry-superxiaoyu:5000/eureka-server:1.0.0）
docker pull registry-superxiaoyu:5000/eureka-server:1.0.0

9、容器的一些问题
容器是什么？
容器类似于胶囊公寓，它是一个精简版的操作系统，一般容器中只运行一个应用
容器是怎么来的？
通过镜像创建容器，通过docker run命令创建。
容器有什么作用？
容器起到了隔离的作用，独享空间、网络等等。

10、容器的生命周期
docker run --help

Usage:	docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

Run a command in a new container

Options:
      --add-host list                         Add a custom host-to-IP mapping (host:ip) (default [])
  -a, --attach list                           Attach to STDIN, STDOUT or STDERR (default [])
      --blkio-weight uint16                   Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)
      --blkio-weight-device weighted-device   Block IO weight (relative device weight) (default [])
      --cap-add list                          Add Linux capabilities (default [])
      --cap-drop list                         Drop Linux capabilities (default [])
      --cgroup-parent string                  Optional parent cgroup for the container
      --cidfile string                        Write the container ID to the file
      --cpu-count int                         CPU count (Windows only)
      --cpu-percent int                       CPU percent (Windows only)
      --cpu-period int                        Limit CPU CFS (Completely Fair Scheduler) period
      --cpu-quota int                         Limit CPU CFS (Completely Fair Scheduler) quota
      --cpu-rt-period int                     Limit CPU real-time period in microseconds
      --cpu-rt-runtime int                    Limit CPU real-time runtime in microseconds
  -c, --cpu-shares int                        CPU shares (relative weight)
      --cpus decimal                          Number of CPUs (default 0.000)
      --cpuset-cpus string                    CPUs in which to allow execution (0-3, 0,1)
      --cpuset-mems string                    MEMs in which to allow execution (0-3, 0,1)
      --credentialspec string                 Credential spec for managed service account (Windows only)
  -d, --detach                                Run container in background and print container ID
      --detach-keys string                    Override the key sequence for detaching a container
      --device list                           Add a host device to the container (default [])
      --device-read-bps throttled-device      Limit read rate (bytes per second) from a device (default [])
      --device-read-iops throttled-device     Limit read rate (IO per second) from a device (default [])
      --device-write-bps throttled-device     Limit write rate (bytes per second) to a device (default [])
      --device-write-iops throttled-device    Limit write rate (IO per second) to a device (default [])
      --disable-content-trust                 Skip image verification (default true)
      --dns list                              Set custom DNS servers (default [])
      --dns-option list                       Set DNS options (default [])
      --dns-search list                       Set custom DNS search domains (default [])
      --entrypoint string                     Overwrite the default ENTRYPOINT of the image
  -e, --env list                              Set environment variables (default [])
      --env-file list                         Read in a file of environment variables (default [])
      --expose list                           Expose a port or a range of ports (default [])
      --group-add list                        Add additional groups to join (default [])
      --health-cmd string                     Command to run to check health
      --health-interval duration              Time between running the check (ns|us|ms|s|m|h) (default 0s)
      --health-retries int                    Consecutive failures needed to report unhealthy
      --health-timeout duration               Maximum time to allow one check to run (ns|us|ms|s|m|h) (default 0s)
      --help                                  Print usage
  -h, --hostname string                       Container host name
      --init                                  Run an init inside the container that forwards signals and reaps processes
      --init-path string                      Path to the docker-init binary
  -i, --interactive                           Keep STDIN open even if not attached
      --io-maxbandwidth string                Maximum IO bandwidth limit for the system drive (Windows only)
      --io-maxiops uint                       Maximum IOps limit for the system drive (Windows only)
      --ip string                             Container IPv4 address (e.g. 172.30.100.104)
      --ip6 string                            Container IPv6 address (e.g. 2001:db8::33)
      --ipc string                            IPC namespace to use
      --isolation string                      Container isolation technology
      --kernel-memory string                  Kernel memory limit
  -l, --label list                            Set meta data on a container (default [])
      --label-file list                       Read in a line delimited file of labels (default [])
      --link list                             Add link to another container (default [])
      --link-local-ip list                    Container IPv4/IPv6 link-local addresses (default [])
      --log-driver string                     Logging driver for the container
      --log-opt list                          Log driver options (default [])
      --mac-address string                    Container MAC address (e.g. 92:d0:c6:0a:29:33)
  -m, --memory string                         Memory limit
      --memory-reservation string             Memory soft limit
      --memory-swap string                    Swap limit equal to memory plus swap: '-1' to enable unlimited swap
      --memory-swappiness int                 Tune container memory swappiness (0 to 100) (default -1)
      --name string                           Assign a name to the container
      --network string                        Connect a container to a network (default "default")
      --network-alias list                    Add network-scoped alias for the container (default [])
      --no-healthcheck                        Disable any container-specified HEALTHCHECK
      --oom-kill-disable                      Disable OOM Killer
      --oom-score-adj int                     Tune host's OOM preferences (-1000 to 1000)
      --pid string                            PID namespace to use
      --pids-limit int                        Tune container pids limit (set -1 for unlimited)
      --privileged                            Give extended privileges to this container
  -p, --publish list                          Publish a container's port(s) to the host (default [])
  -P, --publish-all                           Publish all exposed ports to random ports
      --read-only                             Mount the container's root filesystem as read only
      --restart string                        Restart policy to apply when a container exits (default "no")
      --rm                                    Automatically remove the container when it exits
      --runtime string                        Runtime to use for this container
      --security-opt list                     Security Options (default [])
      --shm-size string                       Size of /dev/shm, default value is 64MB
      --sig-proxy                             Proxy received signals to the process (default true)
      --stop-signal string                    Signal to stop a container, SIGTERM by default (default "SIGTERM")
      --stop-timeout int                      Timeout (in seconds) to stop a container
      --storage-opt list                      Storage driver options for the container (default [])
      --sysctl map                            Sysctl options (default map[])
      --tmpfs list                            Mount a tmpfs directory (default [])
  -t, --tty                                   Allocate a pseudo-TTY
      --ulimit ulimit                         Ulimit options (default [])
  -u, --user string                           Username or UID (format: <name|uid>[:<group|gid>])
      --userns string                         User namespace to use
      --uts string                            UTS namespace to use
  -v, --volume list                           Bind mount a volume (default [])
      --volume-driver string                  Optional volume driver for the container
      --volumes-from list                     Mount volumes from the specified container(s) (default [])
  -w, --workdir string                        Working directory inside the container

===========================例子=============================
创建容器：
docker run -d -p 5000:5000 \
--restart=always \
--privileged=true \
--name=registry-superxiaoyu \
-v /date/volume/registry:/var/lib/registry \
registry

查看容器：
  查看正在运行的容器：docker ps
  查看所用的容器，包括已经停止的：docker ps -a

停止容器
  停止容器：docker stop 容器id
  强制停止容器：docker kill 容器id

启动容器：
  启动容器：docker start 容器id
  重启容器：docker restart 容器id

删除容器：
  删除停止的容器：docker rm 容器id
  删除正在运行的容器，强制删除容器：docker rm -f 容器id

11、如何进入容器的内部
  有4种方式进入容器，分别为 exec、docker attach、 ssh、 nsenter
  这4种都能进入容器，但是最好用最常用的是exec，所以今天就用exec做示例

12、docker exec --help
-d 以后台方式执行，这样，我们执行完这条命令，还可以干其他事情，写脚本最常用
-e 代表环境变量
-i 以交互方式运行，是阻塞式的
-t 分配一个伪终端。这个参数通常与-i参数一起使用，然后再后面跟上容器里的/bin/bash，这样就把我们带到容器里去了
-u 指定进入的容器以哪个用户登陆，默认是root

13、进入容器命令
docker exec -it eureka sh
docker exec -it eureka /bin/bash
docker exec -it eureka pwd
docker exec -it eureka top
docker exec -it eureka ls
可以不进入容器且直接执行命令：
docker exec -it eureka 指令(ls、pwd、top……)

14、容器改变后能不能重新创建镜像
a、进入容器
docker exec -it springboot2 /bin/bash
b、修改容器的内容（假设安装ll命令）
echo "alias ll='ls -l'" >> ~/.bashrc && source ~/.bashrc
c、生成镜像命令
docker commit --help
  -a 用来指定作者
  -b 使用Dockerfile指令来创建镜像
  -m 描述我们此次创建image的信息
  -p 在commit时，将容器暂停
d、重新生成镜像例子（要先退出容器exit）
  docker commit -m="add ll" --author="superxiaoyu" springboot2 registry-superxiaoyu/springboot2-server:2.0.0
e、查看是否生成成功
docker images
f、创建容器
  docker run -d -p 9090:9090 --name=springboot2 registry-superxiaoyu/springboot2-server:2.0.0

15、外部网络访问容器应用，是通过端口来实现的
a、参数-p，指定端口
  docker run -d -p 8080:80 nginx
    其中 8080是宿主机的端口，80是容器的端口。
b、参数-P，随机端口，随机范围 32769-60999
  docker run -d -P nginx

16、dockerfile的端口实现规则
a、有开放 EXPOSE 8761
  docker build -t registry-superxiaoyu/springboot2-server:1.0.0 .
  参数-p，指定端口
    docker run -d -p 8761:8761 --name=springboot2 registry-superxiaoyu/springboot2-server:1.0.0
  参数-P，随机端口
    docker run -d -P --name=springboot2 registry-superxiaoyu/springboot2-server:1.0.0
    达到的效果是：0.0.0.0:32771->8761
b、没开放 EXPOSE 8761
  参数-p，指定端口
    docker run -d -p 8761:8761 --name=springboot2 registry-superxiaoyu/springboot2-server:1.0.0
    达到的效果是：正常
  参数-P，随机端口
    docker run -d -P --name=springboot2 registry-superxiaoyu/springboot2-server:1.0.0
    达到的效果是：无端口号，连内部容器都没有端口

17、业务场景：有3个容器（容器之间的通信）
a、安装mysql
docker run -p 3307:3306 --name mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
-d mysql:5.6
b、查看mysql的ip信息
  进入容器：docker exec -it mysql /bin/bash
  docker镜像没有ifconfig、ping指令
  apt-get update
  apt install net-tools # ifconfig
  apt install iputils-ping # ping
c、创建容器
docker run -d -p 8083:8083 --name product \
--link mysql5.6:mysql5.6 \
--link springboot2:superxiaoyuspringboot2 \
registry-superxiaoyu/springboot1-server:1.0.0
注：link就是容器直接的连接，你不用IP的情况下通过link来实现容器名之间的通信
它的语法是：link 容器名:别名
d、link的原理
docker exec -it springboot1 /bin/bash
cat /etc/hosts
原理就是在springboot1容器中的hosts中加了两条记录

18、如何在宿主机中查看容器日志
a、给springboot1日志指定目录：/opt/data/
==============docker run volume===============
b、重新构建springboot1
docker build -t registry-superxiaoyu/springboot1-server:1.0.0 .
c、什么是volume？
就是把docker的数据保存到宿主机的磁盘中，通常说的就是挂载点或者叫做卷
语法：-v 宿主机目录:容器目录
d、创建容器(privileged是添加权限，可以写日志)
docker run -d -p 8761:8761 --name=springboot1 \
--privilegd=true \
-v /data/container/data/springboot1:/opt/data \
registry-superxiaoyu/springboot1-server:1.0.0

==============dockerfile volume================
b、给dockerfile加挂载点
#第一行：基础镜像：FROM指令：基础镜像名：tag，例如java:8
FROM java:8
#第二行：维护者：格式:MAINTAINER <name>
MAINTAINER superxiaoyu

#添加挂载点
VOLUME /opt/data

#第三行：镜像的操作指令
#ADD拷贝一个文件到容器中，格式：ADD <src> <dest>
ADD springboot2-server-1.0.0-SNAPSHOT.jar /data/app.jar
#第四行：告诉容器暴露端口，在容器启动的时候，需要通过-p做端口映射
EXPOSE 8761
#第五行：配置容器启动后，执行什么命令
ENTRYPOINT ["java","-jar","/data/app.jar"]
c、重新构建springboot1
docker build -t registry-superxiaoyu/springboot1-server:1.0.0 .
d、创建容器
docker run -d -p 8761:8761 --name=springboot1 \
--privilegd=true \
registry-superxiaoyu/springboot1-server:1.0.0
e、如何找到宿主机的挂载目录
docker inspect springboot1
在MOUNTS下：
Source对应的路径就是宿主机对应的目录

总结：两种的区别
docker run 是能指定宿主机的目录
dockerfile volume 无法指定宿主机的目录，都是自动生成，而且是随机的：默认在/var/lib/docker/volumes/
（为什么是随机生成？因为dockerfile不能确定是否每台宿主机都存在目录）

案例：给mysql数据添加挂载点（如果不挂载，随着容器的删除，数据也会丢失）
docker run -p 3306:3306 --name mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
--privilegd=true \
-v /data/container/data/mysql:/var/lib/mysql \
-d mysql:5.6
